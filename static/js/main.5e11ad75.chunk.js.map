{"version":3,"sources":["Components/ImageSearchForm/ImageSearchForm.js","Components/FaceDetect/FaceDetect.js","App.js","serviceWorker.js","index.js"],"names":["ImageSearchForm","onInputChange","onSubmit","className","type","onChange","onClick","style","position","bottom","paddingBottom","transform","left","fontSize","FaceDetect","imageUrl","box","id","alt","src","width","heigh","top","topRow","right","rightCol","bottomRow","leftCol","app","Clarifai","App","apiKey","calculateFaceLocation","data","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","Number","height","left_col","top_row","right_col","bottom_row","displayFaceBox","setState","event","input","target","value","state","models","predict","FACE_DETECT_MODEL","then","response","catch","err","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"wVA2BeA,G,MAxBS,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,cAAeC,EAAe,EAAfA,SACtC,OACI,yBAAKC,UAAU,WACX,yBAAKA,UAAU,UACX,yBAAKA,UAAU,gCACX,2BACIA,UAAU,qBACVC,KAAK,OACLC,SAAUJ,IAEd,4BACIE,UAAU,8CACVG,QAASJ,GAFb,YAQR,6BACI,4BAAQK,MAAO,CAAEC,SAAU,WAAYC,OAAQ,IAAKC,cAAe,OAAQC,UAAW,iBAAkBC,KAAM,MAAOC,SAAU,QAA/H,oBCEDC,G,MAnBI,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,SAAUC,EAAU,EAAVA,IAC5B,OACI,yBAAKb,UAAU,aACX,yBAAKA,UAAU,gBACX,yBAAMc,GAAG,aAAaC,IAAI,GAAGC,IAAKJ,EAAUK,MAAM,QAAQC,MAAM,SAChE,yBACIlB,UAAU,eAEVI,MAAO,CACHe,IAAKN,EAAIO,OACTC,MAAOR,EAAIS,SACXhB,OAAQO,EAAIU,UACZd,KAAMI,EAAIW,eCV5BC,G,MAAM,IAAIC,IAASC,IAAI,CAC3BC,OAAQ,sCA8DKD,E,kDA1Db,aAAe,IAAD,8BACZ,gBASFE,sBAAwB,SAACC,GACvB,IAAMC,EACJD,EAAKE,QAAQ,GAAGF,KAAKG,QAAQ,GAAGC,YAAYC,aACxCC,EAAQC,SAASC,eAAe,cAChCrB,EAAQsB,OAAOH,EAAMnB,OACrBuB,EAASD,OAAOH,EAAMI,QAC5B,MAAO,CACLhB,QAASO,EAAaU,SAAWxB,EACjCG,OAAQW,EAAaW,QAAUF,EAC/BlB,SAAUL,EAAQc,EAAaY,UAAY1B,EAC3CM,UAAWiB,EAAST,EAAaa,WAAaJ,IApBpC,EAyBdK,eAAiB,SAAChC,GAChB,EAAKiC,SAAS,CAAEjC,IAAKA,KA1BT,EA6Bdf,cAAgB,SAACiD,GACf,EAAKD,SAAS,CAAEE,MAAOD,EAAME,OAAOC,SA9BxB,EAiCdnD,SAAW,WACT,EAAK+C,SAAS,CAAElC,SAAU,EAAKuC,MAAMH,QACrCvB,EAAI2B,OACDC,QAAQ3B,IAAS4B,kBAAmB,EAAKH,MAAMH,OAC/CO,MAAK,SAACC,GAAD,OAEJ,EAAKX,eAAe,EAAKhB,sBAAsB2B,OAGhDC,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,OAxC9B,EAAKP,MAAQ,CACXH,MAAO,GACPpC,SAAU,GACVC,IAAK,IALK,E,qDA8CZ,OACE,yBAAKb,UAAU,OACb,0DAA+B,6BAA/B,iBACA,kBAAC,EAAD,CACEF,cAAe+D,KAAK/D,cACpBC,SAAU8D,KAAK9D,WAEjB,kBAAC,EAAD,CAAYc,IAAKgD,KAAKV,MAAMtC,IAAKD,SAAUiD,KAAKV,MAAMvC,gB,GAtD5CkD,aCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFjC,SAASC,eAAe,SDwHpB,kBAAmBiC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdlB,OAAM,SAAAmB,GACLjB,QAAQiB,MAAMA,EAAMC,c","file":"static/js/main.5e11ad75.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./ImageSearchForm.css\";\r\n// update the component with their parameter\r\nconst ImageSearchForm = ({ onInputChange, onSubmit }) => {\r\n    return (\r\n        <div className=\"ma5 mto\">\r\n            <div className=\"center\">\r\n                <div className=\"form center pa4 br3 shadow-5\">\r\n                    <input\r\n                        className=\"f4 pa2 w-70 center\"\r\n                        type=\"text\"\r\n                        onChange={onInputChange}    // add an onChange to monitor input state\r\n                    />\r\n                    <button\r\n                        className=\"tc ph4 w-30 grow f4 link  dib white bg-blue\"\r\n                        onClick={onSubmit}   // add onClick function to perform task\r\n                    >\r\n                        Detect\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <footer style={{ position: 'absolute', bottom: '0', paddingBottom: '.5em', transform: 'translate(-50%', left: '50%', fontSize: '1em' }}>Vishal @2020</footer>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default ImageSearchForm;","import React from \"react\";\r\n// add css to style the facebox\r\nimport \"./FaceDetect.css\";\r\n// pass the box state to the component\r\n\r\nconst FaceDetect = ({ imageUrl, box }) => {\r\n    return (\r\n        <div className=\"center ma\">\r\n            <div className=\"absolute mt2\">\r\n                < img id=\"inputimage\" alt=\"\" src={imageUrl} width=\"500px\" heigh=\"auto\" />\r\n                <div\r\n                    className=\"bounding-box\"\r\n                    // styling that makes the box visible base on the return value\r\n                    style={{\r\n                        top: box.topRow,\r\n                        right: box.rightCol,\r\n                        bottom: box.bottomRow,\r\n                        left: box.leftCol,\r\n                    }}\r\n                ></div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default FaceDetect;","import React, { Component } from \"react\";\nimport Clarifai from \"clarifai\";\nimport ImageSearchForm from \"./Components/ImageSearchForm/ImageSearchForm.js\";\nimport FaceDetect from \"./Components/FaceDetect/FaceDetect.js\";\nimport \"./App.css\";\n\n//add your API key here from Clarifai.\nconst app = new Clarifai.App({\n  apiKey: \"e737a81ec2cb4226a2d84133b5f94b06\",\n});\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      input: \"\",\n      imageUrl: \"\",\n      box: {}, // # a new object state that hold the bounding_box value\n    };\n  }\n\n  // this function calculate the facedetect location in the image\n  calculateFaceLocation = (data) => {\n    const clarifaiFace =\n      data.outputs[0].data.regions[0].region_info.bounding_box;\n    const image = document.getElementById(\"inputimage\");\n    const width = Number(image.width);\n    const height = Number(image.height);\n    return {\n      leftCol: clarifaiFace.left_col * width,\n      topRow: clarifaiFace.top_row * height,\n      rightCol: width - clarifaiFace.right_col * width,\n      bottomRow: height - clarifaiFace.bottom_row * height,\n    };\n  };\n\n  /* this function display the face-detect box base on the state values */\n  displayFaceBox = (box) => {\n    this.setState({ box: box });\n  };\n\n  onInputChange = (event) => {\n    this.setState({ input: event.target.value });\n  };\n\n  onSubmit = () => {\n    this.setState({ imageUrl: this.state.input });\n    app.models\n      .predict(Clarifai.FACE_DETECT_MODEL, this.state.input)\n      .then((response) =>\n        // calculateFaceLocation function pass to displaybox as is parameter\n        this.displayFaceBox(this.calculateFaceLocation(response))\n      )\n      // if error exist console.log error\n      .catch((err) => console.log(err));\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h2>This will detect human face<br />give it a try</h2>\n        <ImageSearchForm\n          onInputChange={this.onInputChange}\n          onSubmit={this.onSubmit}\n        />\n        <FaceDetect box={this.state.box} imageUrl={this.state.imageUrl} />\n      </div>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"tachyons\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}